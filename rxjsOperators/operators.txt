Operators are functions. There are two kinds of operators:

Pipeable Operators are the kind that can be piped to Observables using the syntax observableInstance.pipe(operator) or, 
observableInstance.pipe(operatorFactory()). Operator factory functions include, filter(...), and mergeMap(...).

-A Pipeable Operator is a function that takes an Observable as its input and returns another Observable. 
It is a pure operation: the previous Observable stays unmodified.

-A Pipeable Operator Factory is a function that can take parameters to set the context and return a Pipeable Operator. 
The factory’s arguments belong to the operator’s lexical scope.

Creation Operators are the other kind of operator, which can be called as standalone functions to create a new Observable.
For example: of(1, 2, 3) creates an observable that will emit 1, 2, and 3, one right after another. 

Combining Operators
These operators are used to combine multiple observables.
1. forkJoin: Waits for all observables to complete and then emits an array of their last emitted values.
Syntax:
forkJoin([observable1, observable2, observable3]).subscribe(results => {
  console.log(results); // Array of results from all observables
});

2. combineLatest: Emits the latest values from multiple observables whenever any of them emit a new value.

Syntax:
import { combineLatest } from 'rxjs';

combineLatest([observable1, observable2, observable3]).subscribe(values => {
  console.log(values); // Array of latest values from all observables
});

3. merge: Merges multiple observables into one observable by subscribing to them all and emitting values as they arrive.

Syntax:
import { merge } from 'rxjs';

merge(observable1, observable2, observable3).subscribe(value => {
  console.log(value);
});

4. concat: Subscribes to observables in the provided order and emits all values in sequence.

Syntax:
import { concat, of } from 'rxjs';

concat(of('First'), of('Second'), of('Third')).subscribe(value => {
  console.log(value);
});
race: Returns an observable that mirrors the first source observable to emit an item.

Copy javascript
import { race } from 'rxjs';

race(observable1, observable2, observable3).subscribe(value => {
  console.log(value);
});
3. Transformation Operators
These operators help to transform data emitted by observables.
map: Projects each value from the source observable to a new value.

Copy javascript
sourceObservable.pipe(
  map(value => value * 2)
).subscribe(result => {
  console.log(result);
});

switchMap: Projects each value from the source observable to a new observable and switches to it.

Copy javascript
sourceObservable.pipe(
  switchMap(value => anotherObservable(value))
).subscribe(result => {
  console.log(result);
});
mergeMap: Projects each value from the source observable to a new observable and merges the values from each resulting observable.

Copy javascript
sourceObservable.pipe(
  mergeMap(value => anotherObservable(value))
).subscribe(result => {
  console.log(result);
});
concatMap: Projects each value from the source observable to a new observable and concatenates the values from each resulting observable.

Copy javascript
sourceObservable.pipe(
  concatMap(value => anotherObservable(value))
).subscribe(result => {
  console.log(result);
});
